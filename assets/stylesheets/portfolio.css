/* Inspiration + CSS "intro" credits: bones.sesh.team */
/* Sources used list:
    - spinbot.pw (video tag, #center),
    - http://static.tumblr.com/zlim8hm/29yn6561z/force-cursor.png (cursor),
    - https://github.com/tsenart/sight/blob/master/fonts/Consolas.ttf (font),
    - https://emerald.gg/images/dot.png (2x2 dot, inspiration and pattern CSS)
*/

@font-face {
  font-family: '8-bit Operator';
  src: url('../fonts/Ac437_DG_One.ttf') format('woff');
  font-weight: normal;
  font-style: normal;
}
* {

  font-family: '8-bit Operator', consolas, sans-serif !important;
}

h1, h2, p {
  font-family: '8-bit Operator', sans-serif;
}

#myDIV {
    width: 100%;
    height: 100%;
    border-top: 5px solid #912b57;
  }
  
  html {
    cursor: url('../others/cursor.png'), default;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }
  
  a {
    color: #e4e3e3;
    text-decoration: none;
  }
  
  .clickables {
    cursor: url('../others/cursor.png'), default;
    color: #e4e3e3;
    text-decoration: none;
  }
  
  .clickables:hover {
    cursor: url('../others/cursor.png'), default;
    color: #AD1456;
    text-decoration: none;
  }
  
  body:has(.skip-container) {
    background: #000 !important; /* Set background to black */
}
  
  body,
  input {
    color: #e4e3e3;
    background-color: rgb(13, 13, 13);
    font-family: '8-bit Operator', sans-serif !important;
  }
  
  @font-face {
    font-family: courier_regular;
    src: url('../others/Consolas.html');
  }
  
  * {
    cursor: url('../others/cursor.png'), default;
    padding: 0;
    margin: 0;
    font-family: consolas, sans-serif;
  }
  
  .profile-pic {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
    margin-bottom: 10px;
  }
  
  .brand-header {
    margin: 10px 0;
    color: #e4e3e3;
  }
  
  .grid-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
    padding: 20px;
  }
  
  .grid-item {
    flex: 1 1 20rem; /* Adjusts the card to have a min-width of 20rem */
    max-width: 20rem; /* Ensures cards don't get too big */
    display: flex;
    justify-content: center;
  }
  
  body {
    overflow-x: hidden;
    font-family: '8-bit Operator', sans-serif !important;
  }
  
  input {
    outline: 0;
    border: none;
  }
  
  td {
    padding: 3px;
  }
  
  hr {
    margin-top: 15px;
    margin-bottom: 15px;
    border-style: dashed;
  }
  
  pre {
    font-size: 1.15em;
  }
  
  .box,
  body,
  input {
    background-color: rgb(13, 13, 13);
    font-family: '8-bit Operator', sans-serif;
  }
  
  .box {
    padding: 15px;
    width: 100%;
    height: 100%;
    overflow: auto;
  }
  
  .top-right {
    position: absolute;
    top: 0;
    right: 5px;
  }
  
  .container {
    text-align: center;
    margin: auto;
    position: relative;
    transform: none;
  }
  
  .skip-container {
    position: fixed;
    text-align: center;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
  
  #brand {
    margin-left: 0.65pc;
  }
  
  .marquee-container {
    position: absolute;
    width: 100%;
    bottom: 10%;
    text-align: center;
  }
  
  #marquee {
    width: 420px;
    overflow: hidden;
    display: inline-block;
    margin-bottom: -4.5px;
    font-size: 15px;
  }
  
  .emoticon {
    vertical-align: middle;
  }
  
  .main {
    overflow: hidden;
  }
  
  .background {
    width: 100%;
    height: 100%;
    position: absolute;
    z-index: -3;
  }
  
  #pattern {
    background: transparent url('../others/dot.png') repeat 0 0;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0;
    z-index: -1;
    opacity: 1;
  }
  
  #pattern,
  #background {
    position: absolute;
    width: 100%;
    height: 100%;
  }
  
  #background {
    z-index: -2;
    position: fixed;
    top: 50%;
    left: 50%;
    min-width: 135%;
    min-height: 110%;
    width: auto;
    height: auto;
    transform: translateX(-50%) translateY(-50%);
    background-size: cover;
    overflow: hidden;
    -webkit-filter: blur(5px);
    -moz-filter: blur(5px);
    -o-filter: blur(5px);
    -ms-filter: blur(5px);
    filter: blur(5px);
  }
  
  .footer {
    position: absolute;
    bottom: 0;
    right: 5px;
  }
  
  .trollface-light {
    -webkit-filter: invert(100%);
    -moz-filter: invert(100%);
    -ms-filter: invert(100%);
  }
  
  ::-webkit-scrollbar {
    width: 0;
  }

  
  @mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .glitch {
    position: relative;
    color: #fff;
    font-size: 4em;
    letter-spacing: 0.5em;
    animation: glitch-skew 1s infinite linear alternate-reverse;
  
    &::before {
      @include glitchCopy;
      left: 2px;
      text-shadow: -2px 0 #ff00c1;
      clip: rect(44px, 450px, 56px, 0);
      animation: glitch-anim 5s infinite linear alternate-reverse;
    }
  
    &::after {
      @include glitchCopy;
      left: -2px;
      text-shadow: -2px 0 #ff00c1, 2px 2px #ff00c1;
      clip: rect(44px, 450px, 56px, 0);
      animation: glitch-anim2 5s infinite linear alternate-reverse;
    }
  }
  
  @keyframes glitch-anim {
    $steps: 20;
    @for $i from 0 to $steps {
      #{percentage($i*(1/$steps))} {
        clip: rect(random(100) + px, 9999px, random(100) + px, 0);
        transform: skew((random(100) / 100) + deg);
      }
    }
  }
  
  @keyframes glitch-anim2 {
    $steps: 20;
    @for $i from 0 to $steps {
      #{percentage($i*(1/$steps))} {
        clip: rect(random(100) + px, 9999px, random(100) + px, 0);
        transform: skew((random(100) / 100) + deg);
      }
    }
  }
  
  @keyframes glitch-skew {
    $steps: 10;
    @for $i from 0 to $steps {
      #{percentage($i*(1/$steps))} {
        transform: skew((random(10) - 5) + deg);
      }
    }
  }
  